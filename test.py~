from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.types.web_app_info import WebAppInfo
import requests
import logging
from config import TOKEN_BOT, API_KEY  # –ò–º–ø–æ—Ä—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–ª—é—á–µ–π API
import datetime
from datetime import timedelta
import asyncio

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN_BOT)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_help = KeyboardButton(text="–°–ø—Ä–∞–≤–∫–∞")
button_forecast = KeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
keyboard.add(button_help, button_forecast)


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞
class ForecastStates(StatesGroup):
    GET_CITY = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
async def get_tomorrow_weather(city: str):
    today = datetime.date.today()
    tomorrow = today + timedelta(days=1)
    url = f"http://api.weatherapi.com/v1/future.json"
    params = {"key": API_KEY, "q": city, "dt": tomorrow.isoformat()}
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if "error" in data:
            return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

        city_name = data["location"]["name"]
        country = data["location"]["country"]
        temp = data["forecast"]["forecastday"][0]["day"]["avgtemp_c"]  # –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        condition = data["forecast"]["forecastday"][0]["day"]["condition"]["text"]
        humidity = data["forecast"]["forecastday"][0]["day"]["avghumidity"]
        wind_kph = data["forecast"]["forecastday"][0]["day"]["maxwind_kph"]

        return {
            "text": (
                f"üåç –ì–æ—Ä–æ–¥: {city_name}, {country}\n"
                f"üå° –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {temp}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {wind_kph} –∫–º/—á\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {condition}"
            ),
        }
    except Exception as e:
        logging.error(e)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫–∞—è –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–≥–æ–¥–∞!",
        reply_markup=keyboard
    )


# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –æ –±–æ—Ç–µ\n\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\" –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    )


# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ø—Ä–∞–≤–∫–∞"
@dp.message(F.text.lower() == "—Å–ø—Ä–∞–≤–∫–∞")
async def handle_help_button(message: Message):
    await help_command(message)


# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
@dp.message(F.text.lower() == "–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
async def ask_for_city(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ForecastStates.GET_CITY)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
@dp.message(ForecastStates.GET_CITY)
async def handle_city_input(message: Message, state: FSMContext):
    city = message.text.strip()
    forecast = await get_tomorrow_weather(city)
    if isinstance(forecast, str):
        await message.answer(forecast)
    else:
        await message.answer(forecast["text"], reply_markup=keyboard)
    await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())