import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from config import TOKEN_BOT, API_KEY
import requests
from keyboards import kb_main, kb_settings, kb_change_city
import sqlite3

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN_BOT)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
router = Router()
dp.include_router(router)


# FSM –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class WeatherStates(StatesGroup):
    change_city = State()


# –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
WEATHER_ICONS = {
    "Clear": "‚òÄÔ∏è",
    "Partly cloudy": "‚õÖ",
    "Cloudy": "‚òÅÔ∏è",
    "Overcast": "‚òÅÔ∏è",
    "Rain": "üåßÔ∏è",
    "Snow": "‚ùÑÔ∏è",
    "Storm": "‚õàÔ∏è",
    "Fog": "üå´Ô∏è",
    "Sunny": "‚òÄÔ∏è",
}


def get_weather_icon(condition: str) -> str:
    for key in WEATHER_ICONS:
        if key.lower() in condition.lower():
            return WEATHER_ICONS[key]
    return "üå§Ô∏è"


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
def get_weather(city: str, forecast_days: int = 1) -> dict | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç forecast_days.
    """
    if forecast_days == 1:
        url = "http://api.weatherapi.com/v1/current.json"
        params = {"key": API_KEY, "q": city, "lang": "ru"}
    else:
        url = "http://api.weatherapi.com/v1/forecast.json"
        params = {"key": API_KEY, "q": city, "days": forecast_days, "lang": "ru"}

    try:
        response = requests.get(url, params=params)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} ‚Äî {response.text}")
            return None
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –ø–æ–≥–æ–¥—ã: {e}")
        return None


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã
async def send_weather(message: Message, city: str, forecast_days: int = 1):
    data = get_weather(city, forecast_days)
    if not data:
        await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API.")
        return

    if forecast_days == 1:
        # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        if "current_condition" not in data:
            logger.error("–ù–µ—Ç –∫–ª—é—á–∞ 'current_condition' –≤ –æ—Ç–≤–µ—Ç–µ API")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.")
            return

        current = data["current_condition"][0]
        temp_c = current["temp_C"]
        feels_like = current["feelsLikeC"]
        condition = current["weatherDesc"][0]["value"]
        icon = get_weather_icon(condition)

        await message.answer(
            f"{icon} <b>–°–µ–π—á–∞—Å</b>\n"
            f"üèô <b>{city}</b>\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp_c}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"üìù –£—Å–ª–æ–≤–∏—è: <b>{condition}</b>",
            parse_mode="HTML"
        )
    else:
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        if "weather" not in data:
            logger.error("–ù–µ—Ç –∫–ª—é—á–∞ 'weather' –≤ –æ—Ç–≤–µ—Ç–µ API")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
            return

        for day in data["weather"]:
            date = day["date"]
            max_temp = day["maxtempC"]
            min_temp = day["mintempC"]
            condition = day["hourly"][0]["weatherDesc"][0]["value"]
            icon = get_weather_icon(condition)

            await message.answer(
                f"{icon} <b>{date}</b>\n"
                f"üèô <b>{city}</b>\n"
                f"‚¨ÜÔ∏è –ú–∞–∫—Å.: <b>{max_temp}¬∞C</b>\n"
                f"‚¨áÔ∏è –ú–∏–Ω.: <b>{min_temp}¬∞C</b>\n"
                f"üìù –£—Å–ª–æ–≤–∏—è: <b>{condition}</b>",
                parse_mode="HTML"
            )


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main)


# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(F.text == "/help")
async def cmd_help(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/mycity - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥\n\n"
        "–§—É–Ω–∫—Ü–∏–∏:\n"
        "1. –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞: –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n"
        "2. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è: –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑.\n"
        "3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ."
    )


# –ö–æ–º–∞–Ω–¥–∞ /mycity
@router.message(F.text == "/mycity")
async def cmd_mycity(message: Message):
    conn = sqlite3.connect("weather_bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT city FROM users WHERE user_id = ?", (message.from_user.id,))
    result = cursor.fetchone()

    if result and result[0]:
        await message.answer(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {result[0]}\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ?",
            reply_markup=kb_change_city
        )
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@router.message(F.text == "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
async def change_city(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    await state.set_state(WeatherStates.change_city)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@router.message(WeatherStates.change_city)
async def save_new_city(message: Message, state: FSMContext):
    new_city = message.text.strip()
    conn = sqlite3.connect("weather_bot.db")
    conn.execute("UPDATE users SET city = ? WHERE user_id = ?", (new_city, message.from_user.id))
    conn.commit()
    await state.clear()
    await message.answer(f"–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_city}", reply_markup=kb_main)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@router.message(F.text.in_(["üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", "üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è"]))
async def handle_weather_type(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.update_data(forecast_days=1 if message.text == "üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞" else 3)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@router.message(~F.text.in_(["üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", "üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]))
async def handle_city(message: Message, state: FSMContext):
    city = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –ë–î
    conn = sqlite3.connect("weather_bot.db")
    conn.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (message.from_user.id,))
    conn.execute("UPDATE users SET city = ? WHERE user_id = ?", (city, message.from_user.id))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (forecast_days)
    data = await state.get_data()
    forecast_days = data.get("forecast_days", 1)

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É
    await send_weather(message, city, forecast_days=forecast_days)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main)


# –ö–æ–º–∞–Ω–¥–∞ /settings
@router.message(F.text == "/settings")
async def cmd_settings(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb_settings)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(F.text == "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def setup_notifications(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb_settings)


# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@router.message(F.text == "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def set_daily_time(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    await state.set_state("daily_time")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ
@router.message(F.text == "üå™ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ")
async def confirm_bad_weather(message: Message, state: FSMContext):
    await message.answer("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ?")
    await state.set_state("confirm_bad_weather")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(lambda m: m.text and F.state == "daily_time")
async def save_daily_time(message: Message, state: FSMContext):
    time = message.text
    conn = sqlite3.connect("weather_bot.db")
    conn.execute("INSERT OR REPLACE INTO users (user_id, daily_time) VALUES (?, ?)",
                 (message.from_user.id, time))
    conn.commit()
    await state.clear()
    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {time}.", reply_markup=kb_main)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ
@router.message(lambda m: m.text and F.state == "confirm_bad_weather")
async def save_bad_weather(message: Message, state: FSMContext):
    if message.text.lower() in ["–¥–∞", "yes"]:
        conn = sqlite3.connect("weather_bot.db")
        conn.execute("UPDATE users SET notify_bad_weather = 1 WHERE user_id = ?",
                     (message.from_user.id,))
        conn.commit()
        await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ –≤–∫–ª—é—á–µ–Ω—ã.", reply_markup=kb_main)
    else:
        await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã.", reply_markup=kb_main)
    await state.clear()


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
async def daily_weather_reminder():
    while True:
        now = datetime.now().strftime("%H:%M")
        conn = sqlite3.connect("weather_bot.db")
        cursor = conn.cursor()

        for row in cursor.execute(
                "SELECT user_id, city, daily_time FROM users WHERE city IS NOT NULL AND daily_time IS NOT NULL"):
            user_id, city, daily_time = row

            if now == daily_time:
                try:
                    await bot.send_message(user_id, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:")
                    await send_weather(user_id, city, forecast_days=1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ö—É–¥—à–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å
async def check_weather_alerts():
    while True:
        conn = sqlite3.connect("weather_bot.db")
        cursor = conn.cursor()

        for row in cursor.execute("SELECT user_id, city FROM users WHERE notify_bad_weather = 1 AND city IS NOT NULL"):
            user_id, city = row
            data = get_weather(city, forecast_days=1)

            if not data:
                continue

            hourly_forecast = data["forecast"]["forecastday"][0]["hour"]
            current_hour_index = datetime.now().hour
            next_hour_index = (current_hour_index + 1) % 24

            current_temp = hourly_forecast[current_hour_index]["temp_c"]
            next_temp = hourly_forecast[next_hour_index]["temp_c"]
            condition = hourly_forecast[next_hour_index]["condition"]["text"].lower()

            bad_conditions = ["–¥–æ–∂–¥—å", "–≥—Ä–æ–∑–∞", "–≥—Ä–∞–¥", "—Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä", "–±—É—Ä—è", "—Å–Ω–µ–≥"]
            is_bad_weather = any(cond in condition for cond in bad_conditions)

            if is_bad_weather or abs(current_temp - next_temp) >= 5:
                try:
                    await bot.send_message(user_id,
                                           f"‚ö†Ô∏è –ü–æ–≥–æ–¥–∞ —Å–∫–æ—Ä–æ –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è!\n{data['location']['name']}: {condition}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ {abs(current_temp - next_temp):.1f}¬∞C")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    loop = asyncio.get_event_loop()
    loop.create_task(daily_weather_reminder())
    loop.create_task(check_weather_alerts())

    await dp.start_polling(bot)


if __name__ == "__main__":
    from database import init_db

    init_db()
    asyncio.run(main())